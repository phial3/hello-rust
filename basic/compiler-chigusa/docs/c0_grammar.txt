// # Basic grammar elements
Identifier: [a-zA-Z] [_0-9a-zA-Z]* 

DecimalInteger: "0" | [1-9] [0-9]+
DecimalFractionalPart: "." [0-9]+
DecimalExponentPart: [Ee] [+-]? [0-9]+
HexadecimalNumber: "0x" [0-9a-fA-F]+
IntegerLiteral: (DecimalInteger | HexadecimalNumber) 
FloatLiteral: 
    DecimalInteger DecimalFractionalPart DecimalExponentPart?
    | DecimalInteger DecimalExponentPart


EscapedChar: "\" ([ntr\\'"] | "x" [0-9a-fA-F]{2} | "u" ( [0-9a-fA-F]{4} | '{' [0-9a-fA-F]+ '}' ) )
Char: [^\\'"\n\r] | EscapedChar

CharLiteral: "'" Char "'"
StringLiteral: "\"" Char* "\""

BooleanLiteral: "true" | "false"

SingleLineComment: "//" .* "\n"
MultilineComment: "/*" .* "*/"

Literal: IntegerLiteral | FloatLiteral | CharLiteral | StringLiteral | BooleanLiteral


// # Keywords
//
// These keywords may appear in following definitions as their raw forms, 
// i.e. kwReturn as "return".
//
// Most keywords' names are their raw forms prepended by "kw"
kwReturn: "return"
kwAs: "as"
kwIf: "if"
kwWhile: "while"
kwFor: "for"
kwDo: "do"
kwBreak: "break"
kwContinue: "continue"
kwConst: "const"
kwStruct: "struct"
kwSwitch: "switch"
kwCase: "case"
kwDefault: "default"


// # Items

// The latter `;` is used only for function pointers,
// e.g. `Fn<int, double; bool>` for `(int, double) -> bool`
// GenericTypeAnnotation: "<" TypeDeclaration ("," TypeDeclaration)* (";" TypeDeclaration)? ">"

// Generic type, e.g. `Struct<T>`
// GenericTypeDeclaration: Identifier GenericTypeAnnotation?

BasicTypeDeclaration: Identifier 

// Array type, e.g. `[int]`, `[long, 4]`
// ArrayTypeDeclaration: "[" TypeDeclaration (";" IntegerLiteral)? "]"

// Reference type, e.g. `&int`, `&Fn<int, double; void>`
// ReferenceTypeDeclaration: "&" TypeDeclaration

// Note:
// C0 has 4 types built in:
// - char (u8)
// - int (i32)
// - double (f64)
// - void ï¼ˆunit)
// 
// Please note that functions are yet to be first-class types.
TypeDeclaration: BasicTypeDeclaration

// # Expressions
//
// "Expression" is abbreviated as "Expr" below.
LiteralExpr: Literal

IdentifierExpr: Identifier<Variable>

// IndexOperator: "[" Expr "]"
// StructChildOperator: "." Identifier<StructChild>

// Subject to change. For now, functions are only accessible as identifiers.
FnCallExpr: Identifier<Function> "(" Expr ("," Expr)* ")"

// StructConstructExpr: Identifier<Type+StructName> "{" (Identifier ":" Expr)* "}"

// Unary operators are applied according to their order of appearance.
PrecedingUnaryOperator: "+" | "-" | "*" | "&" | "!" | "~" | "++" | "--"
ProcedingUnaryOperator: "++" | "--"

// Binary operators are applied according to precedence rules defined elsewhere.
// Operators with the same precedence value are left associative, except for assignment ops.
// i.e. `x = z = a + b - c` -> `(x = (z = ((a + b) - c)))`
BinaryOperator: "+" | "-" | "*" | "/" | "%" | "^" | "="
    | "&" | "|" | "&&" | "||" | ">>" | "<<" | "<" | "<=" | "==" | "!=" | ">=" | ">"

Item: LiteralExpr | FnCallExpr | IdentifierExpr

ProceedingUnaryOperation: Expr ProceedingUnaryOperator

PrecedingUnaryOperation: PrecedingUnaryOperator ProceedingUnaryOperation

BinaryOperation: PrecedingUnaryOperation (BinaryOperator PrecedingUnaryOperation)*

TypeCastExpr: "(" TypeDefinition ")" Expr

// Design stolen from https://github.com/rust-lang/rust/blob/b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31/src/librustc_parse/parser/expr.rs#L778
BottomExpr: BinaryOperation | "(" BinaryOperation ")"

// Expressions can be a LValue or RValue. Specs stolen from https://zh.cppreference.com/w/cpp/language/value_category
Expr: BottomExpr


// # Statements
//
// "Statement" is abbreviated as "Stmt" below.

// ## Flow Control

IfStmt: "if" "(" Expr<bool|int> ")" BlockExpr ("else" BlockExpr)?

WhileStmt: "while" "(" Expr<bool|int> ")" Stmt

DoWhileStmt: "do" Stmt "while" "(" Expr<bool|int> ")" ";"

ForLoopStmt: "for" "(" VarDecl ";" Expr ";" Expr ")" Stmt

BreakStmt: "break" ";"

ContinueStmt: "continue" ";"

ReturnStmt: "return" Expr? ";"

BlockStmt: "{" Stmt* "}"

// ## Declaration

SingleVarDecl: Identifier ("=" Expr)?
VarDecl: "const"? TypeDeclaration SingleVarDecl ("," SingleVarDecl)?
VarDeclStmt: VarDecl ";"

EmptyStmt: ";"

ExprStmt: Expr ";"

Stmt: IfStmt | WhileStmt | DoWhileStmt | ForLoopStmt | BreakStmt | ContinueStmt 
    | ReturnStmt | VarDeclStmt | ExprStmt | EmptyStmt | BlockStmt



// # Large Structures
FnParamsDecl: "(" (TypeDefinition Identifier ( "," TypeDefiniiton Identifier )* )? ")"
FnDecl: TypeDefinition Identifier FnParamsDecl (BlockExpr | ";")

// structs are identified directly by their name; no "struct"
StructDecl: "struct" Identifier ( "{" (
    TypeDefinition Identifier ( "," TypeDefinition Identifier)* )? "}" )?

Program: (StructDecl | FnDecl | VarDecl)*
